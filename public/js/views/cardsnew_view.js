// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'models/cards'], function(App, Cards) {
    var CardsNewView;
    return CardsNewView = (function(_super) {

      __extends(CardsNewView, _super);

      function CardsNewView() {
        this.cancel = __bind(this.cancel, this);

        this.add = __bind(this.add, this);
        return CardsNewView.__super__.constructor.apply(this, arguments);
      }

      CardsNewView.prototype.id = 'js-cardsnew';

      CardsNewView.prototype.template = jade.templates.cardsnew;

      CardsNewView.prototype.events = {
        'click .js-add': 'add',
        'click .js-cancel': 'cancel'
      };

      CardsNewView.prototype.initialize = function() {
        var cardsJson;
        cardsJson = $('#cards-json').remove().text();
        if (cardsJson) {
          App.cards = App.cards || new Cards();
          App.cards.reset(JSON.parse(cardsJson));
        }
        return this.render();
      };

      CardsNewView.prototype.render = function() {
        this.$el.html(this.template());
        return this;
      };

      CardsNewView.prototype.clearForm = function() {
        this.$el.find("input[name='name']").val("");
        this.$el.find("input[name='address']").val("");
        this.$el.find("input[name='city']").val("");
        return this.$el.find("textarea[name='notes']").val("");
      };

      CardsNewView.prototype.add = function(e) {
        var card, isNew, loader;
        e.preventDefault();
        card = {
          name: this.$el.find("input[name='name']").val(),
          address: this.$el.find("input[name='address']").val(),
          city: this.$el.find("input[name='city']").val(),
          notes: this.$el.find("textarea[name='notes']").val()
        };
        this.clearForm();
        isNew = (!App.cards) || ((App.cards.demo != null) && !App.cards.demo.fetched);
        if (!isNew) {
          if (App.demo.active) {
            App.cards.demo.create(card, {
              at: 0
            });
          } else {
            App.cards.create(card, {
              at: 0
            });
          }
        } else {
          App.cards = App.cards || new Cards();
          if (App.demo.active) {
            loader = App.notifications.newLoader();
            App.cards.demo.fetch({
              success: function() {
                if (App.demo.active) {
                  return App.cards.demo.create(card, {
                    at: 0
                  });
                }
              },
              complete: function() {
                return App.notifications.remove(loader);
              }
            });
          } else {
            loader = App.notifications.newLoader();
            App.cards.fetch({
              success: function() {
                return App.cards.create(card, {
                  at: 0
                });
              },
              complete: function() {
                return App.notifications.remove(loader);
              }
            });
          }
        }
        App.router.navigate('cards', {
          trigger: true
        });
        return $(window).scrollTop(0);
      };

      CardsNewView.prototype.cancel = function(e) {
        e.preventDefault();
        this.clearForm();
        App.router.navigate('cards', {
          trigger: true
        });
        return $(window).scrollTop(0);
      };

      return CardsNewView;

    })(Backbone.View);
  });

}).call(this);
