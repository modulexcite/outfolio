// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'models/sharedcard'], function(App, SharedCard) {
    var SharedCardView;
    return SharedCardView = (function(_super) {

      __extends(SharedCardView, _super);

      function SharedCardView() {
        this.render = __bind(this.render, this);
        return SharedCardView.__super__.constructor.apply(this, arguments);
      }

      SharedCardView.prototype.id = 'js-sharedcard';

      SharedCardView.prototype.template = jade.templates.card;

      SharedCardView.prototype.initialize = function() {
        var sharedCardJson;
        this.model = App.sharedCard = App.sharedCard || new SharedCard();
        this.model.on('change', this.render);
        sharedCardJson = $('#sharedcard-json').remove().text();
        if (sharedCardJson) {
          return this.model.set(JSON.parse(sharedCardJson));
        }
      };

      SharedCardView.prototype.render = function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      SharedCardView.prototype.index = function(shareId, cardId) {
        var card, loader, _ref;
        card = (_ref = App.sharedCards) != null ? _ref.get(cardId) : void 0;
        if (card) {
          if (card !== this.model) {
            this.model.off('change', this.render);
            this.model = App.sharedCard = card;
            this.model.on('change', this.render);
            this.render();
          }
          App.dispatcher.trigger('shared:card:ready');
        } else {
          if (cardId !== this.model.id) {
            this.model.set({
              id: cardId,
              owner: {
                _id: shareId
              }
            }, {
              silent: true
            });
            if (App.demo.active) {
              loader = App.notifications.newLoader();
              this.model.demo.fetch({
                complete: function() {
                  return App.notifications.remove(loader);
                },
                success: function() {
                  return App.dispatcher.trigger('shared:card:ready');
                }
              });
            } else {
              loader = App.notifications.newLoader();
              this.model.fetch({
                complete: function() {
                  return App.notifications.remove(loader);
                },
                success: function() {
                  return App.dispatcher.trigger('shared:card:ready');
                }
              });
            }
          } else {
            App.dispatcher.trigger('shared:card:ready');
          }
        }
        $(window).scrollTop(0);
        return this;
      };

      return SharedCardView;

    })(Backbone.View);
  });

}).call(this);
