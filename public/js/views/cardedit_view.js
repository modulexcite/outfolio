// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'models/card'], function(App, Card) {
    var CardEditView;
    return CardEditView = (function(_super) {

      __extends(CardEditView, _super);

      function CardEditView() {
        this.cancel = __bind(this.cancel, this);

        this.save = __bind(this.save, this);

        this.render = __bind(this.render, this);
        return CardEditView.__super__.constructor.apply(this, arguments);
      }

      CardEditView.prototype.id = 'js-cardedit';

      CardEditView.prototype.template = jade.templates.cardedit;

      CardEditView.prototype.events = {
        'click .js-save': 'save',
        'click .js-cancel': 'cancel'
      };

      CardEditView.prototype.initialize = function(id) {
        var card, cardJson;
        console.debug('CardEditView#initialize');
        this.model = App.card = App.card || new Card();
        this.model.on('change', this.render);
        if (id === this.model.id) {
          return this.render();
        } else {
          cardJson = $('#card-json').remove().text();
          if (cardJson) {
            card = JSON.parse(cardJson);
            if (card.owner._id === App.user.id && card._id === id) {
              return this.model.set(card);
            }
          }
        }
      };

      CardEditView.prototype.render = function() {
        console.debug('CardEditView#render');
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      CardEditView.prototype.index = function(id) {
        var card, loader, _ref;
        console.debug('CardEditView#index', id);
        card = (_ref = App.cards) != null ? _ref.get(id) : void 0;
        if (card) {
          if (card !== this.model) {
            this.model.off('change', this.render);
            this.model = App.card = card;
            this.model.on('change', this.render);
            this.render();
          }
          App.dispatcher.trigger('card:edit:ready');
        } else {
          if (id !== this.model.id) {
            this.model.set({
              _id: id
            }, {
              silent: true
            });
            if (App.demo.active) {
              loader = App.notifications.newLoader();
              this.model.demo.fetch({
                complete: function() {
                  return App.notifications.remove(loader);
                },
                success: function() {
                  return App.dispatcher.trigger('card:edit:ready');
                }
              });
            } else {
              loader = App.notifications.newLoader();
              this.model.fetch({
                complete: function() {
                  return App.notifications.remove(loader);
                },
                success: function() {
                  return App.dispatcher.trigger('card:edit:ready');
                }
              });
            }
          } else {
            App.dispatcher.trigger('card:edit:ready');
          }
        }
        $(window).scrollTop(0);
        return this;
      };

      CardEditView.prototype.save = function(e) {
        console.debug('CardEditView#save');
        e.preventDefault();
        if (App.demo.active) {
          this.model.set({
            name: this.$("input[name='name']").val(),
            address: this.$("input[name='address']").val(),
            city: this.$("input[name='city']").val(),
            notes: this.$("textarea[name='notes']").val()
          });
        } else {
          this.model.save({
            name: this.$("input[name='name']").val(),
            address: this.$("input[name='address']").val(),
            city: this.$("input[name='city']").val(),
            notes: this.$("textarea[name='notes']").val()
          });
        }
        return App.router.navigate("card/" + this.model.id, {
          trigger: true
        });
      };

      CardEditView.prototype.cancel = function(e) {
        console.debug('CardEditView#cancel');
        e.preventDefault();
        this.render();
        return App.router.navigate("card/" + this.model.id, {
          trigger: true
        });
      };

      return CardEditView;

    })(Backbone.View);
  });

}).call(this);
