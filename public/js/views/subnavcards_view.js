// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['app', 'models/owner'], function(App, Owner) {
    var SubnavCardsView;
    return SubnavCardsView = (function(_super) {

      __extends(SubnavCardsView, _super);

      function SubnavCardsView() {
        this.sharedCard = __bind(this.sharedCard, this);

        this.cardShare = __bind(this.cardShare, this);

        this.edit = __bind(this.edit, this);

        this.card = __bind(this.card, this);

        this.render = __bind(this.render, this);
        return SubnavCardsView.__super__.constructor.apply(this, arguments);
      }

      SubnavCardsView.prototype.id = 'js-subnavcards';

      SubnavCardsView.prototype.template = jade.templates.subnavcards;

      SubnavCardsView.prototype.events = {
        'click .js-cards a': 'routerFollow',
        'click .js-new a': 'routerFollow',
        'click .js-share a': 'routerFollow',
        'click .js-card a': 'routerFollow',
        'click .js-edit a': 'routerFollow',
        'click .js-card-share a': 'routerFollow',
        'click .js-shared a': 'routerFollow',
        'click .js-shared-card a': 'routerFollow',
        'click .js-refresh a': 'refresh',
        'click .js-delete a': 'destroy'
      };

      SubnavCardsView.prototype.initialize = function() {
        var ownerJson;
        this.data = {
          authenticated: null,
          card: null,
          owner: null
        };
        this.data.toJSON = function() {
          var res, _ref, _ref1;
          res = {};
          res.authenticated = App.session.authenticated;
          res.card = (_ref = this.card) != null ? _ref.toJSON() : void 0;
          res.owner = (_ref1 = this.owner) != null ? _ref1.toJSON() : void 0;
          return res;
        };
        App.owner = App.owner || new Owner();
        App.dispatcher.on('card:ready', this.card);
        App.dispatcher.on('card:edit:ready', this.edit);
        App.dispatcher.on('card:share:ready', this.cardShare);
        App.dispatcher.on('shared:card:ready', this.sharedCard);
        ownerJson = $('#owner-json').remove().text();
        if (ownerJson) {
          return App.owner.set(JSON.parse(ownerJson));
        }
      };

      SubnavCardsView.prototype.render = function() {
        this.$el.html(this.template(this.data.toJSON()));
        return this;
      };

      SubnavCardsView.prototype.routerFollow = function(e) {
        return App.router.follow(e);
      };

      SubnavCardsView.prototype.activateLink = function(selector) {
        this.$('li').each(function(index, element) {
          return $(element).removeClass('active');
        });
        return this.$(selector).addClass('active');
      };

      SubnavCardsView.prototype.confirmDelete = function() {
        var $delete;
        $delete = this.$('.js-delete a');
        if ($delete.hasClass('js-confirm-delete')) {
          $delete.removeClass('js-confirm-delete');
          $delete.text('Delete');
          return true;
        } else {
          $delete.addClass('js-confirm-delete');
          $delete.text('Delete?');
          return false;
        }
      };

      SubnavCardsView.prototype.refresh = function(e) {
        e.preventDefault();
        return App.dispatcher.trigger('content:refresh');
      };

      SubnavCardsView.prototype.destroy = function(e) {
        var card;
        e.preventDefault();
        if (this.confirmDelete()) {
          card = App.card;
          if (App.demo.active) {
            App.demo.destroy(card);
          } else {
            card.destroy();
          }
          App.router.navigate('cards', {
            trigger: true
          });
          return $(window).scrollTop(0);
        }
      };

      SubnavCardsView.prototype.cards = function() {
        this.data.card = null;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-cards');
        return this;
      };

      SubnavCardsView.prototype["new"] = function() {
        this.data.card = null;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-new');
        return this;
      };

      SubnavCardsView.prototype.share = function() {
        this.data.card = null;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-share');
        return this;
      };

      SubnavCardsView.prototype.card = function() {
        this.data.card = App.card;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-card');
        return this;
      };

      SubnavCardsView.prototype.edit = function() {
        this.data.card = App.card;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-edit');
        return this;
      };

      SubnavCardsView.prototype.cardShare = function() {
        this.data.card = App.card;
        this.data.owner = null;
        this.render();
        this.activateLink('.js-card-share');
        return this;
      };

      SubnavCardsView.prototype.shared = function(shareId) {
        var _this = this;
        this.data.card = null;
        this.data.owner = App.owner;
        if (App.owner.id === shareId) {
          this.render();
          this.activateLink('.js-shared');
        } else {
          if (App.demo.active) {
            App.owner.demo.fetch({
              success: function() {
                _this.render();
                return _this.activateLink('.js-shared');
              }
            });
          } else {
            App.owner.set('_id', shareId);
            App.owner.fetch({
              success: function() {
                _this.render();
                return _this.activateLink('.js-shared');
              }
            });
          }
        }
        return this;
      };

      SubnavCardsView.prototype.sharedCard = function() {
        this.data.card = App.sharedCard;
        App.owner.set(App.sharedCard.get('owner'));
        this.data.owner = App.owner;
        this.render();
        this.activateLink('.js-shared-card');
        return this;
      };

      return SubnavCardsView;

    })(Backbone.View);
  });

}).call(this);
