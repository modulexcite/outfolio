// Generated by CoffeeScript 1.3.3
(function() {

  define(['app', 'models/user', 'models/cards', 'models/card', 'models/owner', 'models/sharedcards', 'models/sharedcard'], function(App, User, Cards, Card, Owner, SharedCards, SharedCard) {
    var Demo;
    return Demo = (function() {

      Demo.prototype.active = false;

      Demo.prototype.responseDelay = 0;

      function Demo() {
        console.debug('Demo#initialize');
        if (this.active) {
          this.load();
        }
      }

      Demo.prototype.load = function() {
        var demoCards, demoUser,
          _this = this;
        console.debug('Demo#load');
        App.user = App.user || new User();
        App.cards = App.cards || new Cards();
        App.card = App.card || new Card();
        App.sharedCards = App.sharedCards || new SharedCards();
        App.sharedCard = App.sharedCard || new SharedCard();
        App.owner = App.owner || new Owner();
        App.user.demo = {};
        App.cards.demo = {};
        App.card.demo = {};
        App.sharedCards.demo = {};
        App.sharedCard.demo = {};
        App.owner.demo = {};
        demoUser = {
          _id: '1',
          name: 'Don Draper',
          email: 'dondraper@example.com'
        };
        demoCards = [
          {
            _id: '1',
            name: 'The Dead Poet',
            address: '450 Amsterdam Ave (& 81st St)',
            city: 'New York',
            notes: 'Irish pub, small room, good beer selection, music jukebox',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '2',
            name: 'Solas',
            address: '232 E 9th Street (& 2nd Ave)',
            city: 'New York',
            notes: 'Dancing bar, mainstream music, large room, usually not a long line to get in',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '3',
            name: 'Sweet Leaf',
            address: '10-93 Jackson Avenue (& 49th Ave), Long Island City',
            city: 'New York',
            notes: 'Great little coffee shop in Long Island City, very good coffee, nice decor with leather seats & vinyl records',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '4',
            name: 'Cloister Cafe',
            address: '238 East 9th Street (& 2nd Ave)',
            city: 'New York',
            notes: 'Hookah bar, nice decor & outside seating, great hookah, decent food too',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '5',
            name: 'The 55 Bar',
            address: '55 Christopher Street (& 7th Ave)',
            city: 'New York',
            notes: 'Small jazz bar, 2 shows usually 7pm & 10pm, arrive early, good atmosphere',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '6',
            name: 'Piccolo Cafe',
            address: '238 Madison Ave (& 37th St)',
            city: 'New York',
            notes: 'Small italian, great for lunch, good pasta & sandwiches, not expensive',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '7',
            name: 'Dominie\'s Hoek',
            address: '48-17 Vernon Boulevard (& 49th Ave), Long Island City',
            city: 'New York',
            notes: 'Bar, outdoor sitting area, cheaper than Manhattan bars, kitchen with your usual bar food',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }, {
            _id: '8',
            name: '230 Fifth',
            address: '230 5th Ave (& 27th St)',
            city: 'New York',
            notes: 'Rooftop bar, amazing view of Empire State, a little expensive, arrive early for a good seat',
            owner: {
              _id: '1',
              name: 'Don Draper'
            }
          }
        ];
        App.user.demo.load = function() {
          console.debug('user#demo#load');
          return App.user.set(demoUser);
        };
        App.cards.demo.fetch = function(options) {
          var complete, error, success, triggerError;
          console.debug('cards#demo#fetch loading');
          App.cards.demo.fetched = true;
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          return setTimeout(function() {
            if (triggerError) {
              console.debug('cards#demo#fetch error');
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug('cards#demo#fetch success');
              App.cards.reset(demoCards);
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          }, _this.responseDelay);
        };
        App.cards.demo.create = function(card, options) {
          var at, complete, error, silent, success, triggerError;
          console.debug("cards#demo#create loading");
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          silent = options.silent ? options.silent : false;
          at = options.at;
          card._id = (parseInt(_.max(App.cards.models, function(model) {
            return model.id;
          }).id) + 1).toString();
          App.cards.add(card, {
            at: at,
            silent: silent
          });
          setTimeout(function() {
            if (triggerError) {
              console.debug("cards#demo#create error");
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug("cards#demo#create success");
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          });
          return _this.responseDelay;
        };
        App.card.demo.fetch = function(options) {
          var complete, error, id, success, triggerError;
          console.debug('card#demo#fetch loading');
          App.card.demo.fetched = true;
          id = App.card.id;
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          return setTimeout(function() {
            if (triggerError) {
              console.debug('card#demo#fetch error');
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug('card#demo#fetch success');
              App.card.set(_.filter(demoCards, function(card) {
                return card.id === id;
              })[0]);
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          }, _this.responseDelay);
        };
        App.sharedCards.demo.fetch = function(options) {
          var complete, error, success, triggerError;
          console.debug('sharedCards#demo#fetch loading');
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          return setTimeout(function() {
            if (triggerError) {
              console.debug('sharedCards#demo#fetch error');
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug('sharedCards#demo#fetch success');
              App.sharedCards.reset(demoCards);
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          }, _this.responseDelay);
        };
        App.sharedCard.demo.fetch = function(options) {
          var complete, error, id, success, triggerError;
          console.debug('sharedCard#demo#fetch loading');
          App.sharedCard.demo.fetched = true;
          id = App.sharedCard.id;
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          return setTimeout(function() {
            if (triggerError) {
              console.debug('sharedCard#demo#fetch error');
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug('sharedCard#demo#fetch success');
              App.sharedCard.set(_.filter(demoCards, function(card) {
                return card.id === id;
              })[0]);
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          }, _this.responseDelay);
        };
        App.owner.demo.fetch = function(options) {
          var complete, error, success, triggerError;
          console.debug('owner#demo#fetch loading');
          triggerError = false;
          options = options ? options : {};
          success = options.success;
          error = options.error;
          complete = options.complete;
          return setTimeout(function() {
            if (triggerError) {
              console.debug('owner#demo#fetch error');
              $('body').trigger('ajaxError');
              if (error) {
                error();
              }
              if (complete) {
                complete();
              }
              return false;
            } else {
              console.debug('owner#demo#fetch success');
              App.owner.set(demoUser);
              $('body').trigger('ajaxSuccess');
              if (success) {
                success();
              }
              if (complete) {
                complete();
              }
              return true;
            }
          }, _this.responseDelay / 2);
        };
        return this.active = true;
      };

      Demo.prototype.destroy = function(model, options) {
        return model.trigger('destroy', model, model.collection, options);
      };

      Demo.prototype.unload = function() {
        console.debug('Demo#unload');
        App.user.demo = null;
        App.cards.demo = null;
        App.card.demo = null;
        App.sharedCards.demo = null;
        App.sharedCard.demo = null;
        App.owner.demo = null;
        return this.active = false;
      };

      return Demo;

    })();
  });

}).call(this);
